{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import ttest_1samp\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df1 =  pd.read_csv('/Users/fu/Desktop/BRENT.csv')\n",
    "df1 = df1.replace('.',np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DATE</th>\n",
       "      <th>DCOILBRENTEU</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2015/9/8</td>\n",
       "      <td>48.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2015/9/9</td>\n",
       "      <td>48.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2015/9/10</td>\n",
       "      <td>47.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2015/9/11</td>\n",
       "      <td>46.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2015/9/14</td>\n",
       "      <td>45.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>2015/12/22</td>\n",
       "      <td>35.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>76</td>\n",
       "      <td>2015/12/23</td>\n",
       "      <td>35.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>2015/12/24</td>\n",
       "      <td>37.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>78</td>\n",
       "      <td>2015/12/25</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>79</td>\n",
       "      <td>2015/12/28</td>\n",
       "      <td>37.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          DATE DCOILBRENTEU\n",
       "0     2015/9/8        48.88\n",
       "1     2015/9/9        48.04\n",
       "2    2015/9/10        47.77\n",
       "3    2015/9/11        46.87\n",
       "4    2015/9/14        45.87\n",
       "..         ...          ...\n",
       "75  2015/12/22        35.26\n",
       "76  2015/12/23        35.79\n",
       "77  2015/12/24        37.22\n",
       "78  2015/12/25          NaN\n",
       "79  2015/12/28        37.08\n",
       "\n",
       "[80 rows x 2 columns]"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head(80)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1276 entries, 0 to 1305\n",
      "Data columns (total 2 columns):\n",
      "DATE            1276 non-null object\n",
      "DCOILBRENTEU    1276 non-null object\n",
      "dtypes: object(2)\n",
      "memory usage: 29.9+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "df1 = df1.dropna()\n",
    "df1.head(80)\n",
    "print(df1.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1306 entries, 0 to 1305\n",
      "Data columns (total 2 columns):\n",
      "DATE          1306 non-null object\n",
      "DCOILWTICO    1255 non-null object\n",
      "dtypes: object(2)\n",
      "memory usage: 20.5+ KB\n"
     ]
    }
   ],
   "source": [
    "df2 =  pd.read_csv('/Users/fu/Desktop/WTI.csv')\n",
    "df2 = df2.replace('.',np.nan)\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           DATE DCOILWTICO\n",
      "0      2015/9/8      45.92\n",
      "1      2015/9/9      44.13\n",
      "2     2015/9/10      45.85\n",
      "3     2015/9/11      44.75\n",
      "4     2015/9/14      44.07\n",
      "...         ...        ...\n",
      "1300   2020/9/1      42.76\n",
      "1301   2020/9/2      42.76\n",
      "1302   2020/9/3      41.39\n",
      "1303   2020/9/4      39.69\n",
      "1305   2020/9/8      36.87\n",
      "\n",
      "[1255 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "df2 = df2.dropna()\n",
    "print(df2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "df11 =  pd.DataFrame(df1)\n",
    "df21 =  pd.DataFrame(df2)\n",
    "df3 = pd.merge(df1,df2)\n",
    "\n",
    "df3['DCOILBRENTEU'] = pd.to_numeric(df3['DCOILBRENTEU'], errors='coerce')\n",
    "df3['DCOILWTICO'] = pd.to_numeric(df3['DCOILWTICO'], errors='coerce')\n",
    "df4 = df3[['DCOILBRENTEU','DCOILWTICO']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1247 entries, 0 to 1246\n",
      "Data columns (total 2 columns):\n",
      "DCOILBRENTEU    1247 non-null float64\n",
      "DCOILWTICO      1247 non-null float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 29.2 KB\n"
     ]
    }
   ],
   "source": [
    "df4.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>DCOILBRENTEU</th>\n",
       "      <th>DCOILWTICO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1247.000000</td>\n",
       "      <td>1247.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>55.048917</td>\n",
       "      <td>51.108236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>13.684396</td>\n",
       "      <td>11.665339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>9.120000</td>\n",
       "      <td>-36.980000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>45.945000</td>\n",
       "      <td>44.875000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>54.770000</td>\n",
       "      <td>51.390000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>65.075000</td>\n",
       "      <td>58.380000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>86.070000</td>\n",
       "      <td>77.410000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       DCOILBRENTEU   DCOILWTICO\n",
       "count   1247.000000  1247.000000\n",
       "mean      55.048917    51.108236\n",
       "std       13.684396    11.665339\n",
       "min        9.120000   -36.980000\n",
       "25%       45.945000    44.875000\n",
       "50%       54.770000    51.390000\n",
       "75%       65.075000    58.380000\n",
       "max       86.070000    77.410000"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F_onewayResult(statistic=59.888842468925155, pvalue=1.4471889825380575e-14)\n",
      "Because p value of F-test is small than 0.05, so reject the hypothesis\n",
      "LeveneResult(statistic=57.511656693794826, pvalue=4.7115192949109983e-14)\n",
      "Because p value of levene test is small than 0.05, so reject the hypothesis\n"
     ]
    }
   ],
   "source": [
    "#F-test\n",
    "print(stats.f_oneway(s1,s2))\n",
    "print(\"Because p value of F-test is small than 0.05, so reject the hypothesis\")\n",
    "#levene-test, using as F-test\n",
    "print(stats.levene(s1, s2))\n",
    "print(\"Because p value of levene test is small than 0.05, so reject the hypothesis\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=7.73878817832128, pvalue=1.460305681498241e-14)"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#T-test\n",
    "s1 = df4['DCOILBRENTEU']\n",
    "s2 = df4['DCOILWTICO']\n",
    "stats.ttest_ind(s1,s2,equal_var = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There is enough evindence to prove that there is significant differnce between BRENR and WTI.\n"
     ]
    }
   ],
   "source": [
    "print(\"There is enough evindence to prove that there is significant differnce between BRENR and WTI.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
