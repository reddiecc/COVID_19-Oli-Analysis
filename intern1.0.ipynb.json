{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>positive</th>\n",
       "      <th>volatility</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>20200123</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.017666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>20200124</td>\n",
       "      <td>4</td>\n",
       "      <td>-0.028603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>20200127</td>\n",
       "      <td>6</td>\n",
       "      <td>-0.015869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>20200128</td>\n",
       "      <td>7</td>\n",
       "      <td>0.009585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>20200129</td>\n",
       "      <td>8</td>\n",
       "      <td>0.000444</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       date  positive  volatility\n",
       "0  20200123         3   -0.017666\n",
       "1  20200124         4   -0.028603\n",
       "2  20200127         6   -0.015869\n",
       "3  20200128         7    0.009585\n",
       "4  20200129         8    0.000444"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Volatility of Price\n",
    "df1 = pd.read_csv('/Users/fu/Desktop/file1.csv')\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>positive</th>\n",
       "      <th>volatility</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>date</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.944530</td>\n",
       "      <td>0.049145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>positive</td>\n",
       "      <td>0.944530</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.045856</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>volatility</td>\n",
       "      <td>0.049145</td>\n",
       "      <td>0.045856</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                date  positive  volatility\n",
       "date        1.000000  0.944530    0.049145\n",
       "positive    0.944530  1.000000    0.045856\n",
       "volatility  0.049145  0.045856    1.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(df1.positive,df1.volatility)\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"volatility\")\n",
    "plt.show()\n",
    "df1.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             volatility   R-squared:                       0.002\n",
      "Model:                            OLS   Adj. R-squared:                 -0.005\n",
      "Method:                 Least Squares   F-statistic:                    0.3034\n",
      "Date:                Sat, 12 Sep 2020   Prob (F-statistic):              0.583\n",
      "Time:                        11:06:30   Log-Likelihood:                -19.470\n",
      "No. Observations:                 146   AIC:                             42.94\n",
      "Df Residuals:                     144   BIC:                             48.91\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.0184      0.033     -0.563      0.575      -0.083       0.046\n",
      "positive    7.328e-09   1.33e-08      0.551      0.583    -1.9e-08    3.36e-08\n",
      "==============================================================================\n",
      "Omnibus:                      116.683   Durbin-Watson:                   1.944\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             3222.607\n",
      "Skew:                          -2.360   Prob(JB):                         0.00\n",
      "Kurtosis:                      25.527   Cond. No.                     3.48e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.48e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/fu/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "#method_1_using statsmodels packages\n",
    "X1 = df1.iloc[:,1]\n",
    "Y1 = df1.iloc[:,2]\n",
    "X1 = sm.add_constant(X1) # We have an intercept in the model, so we increase the intercept\n",
    "est1 = sm.OLS(Y1,X1).fit()\n",
    "print(est1.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "const      -1.836735e-02\n",
      "positive    7.328143e-09\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "Bata = est1.params\n",
    "print(Bata)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#draw the picture of method 1\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "predicts = est1.predict() # the predicted value of the model\n",
    "X1 = df1.iloc[:, 1] # the independent variable is the data in column 2\n",
    "plt.scatter(X1, Y1, label='the actual value') \n",
    "plt.plot(X1, predicts, color = 'red', label='the predicted value')\n",
    "plt.legend() \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:[-0.01836735]\n",
      "Coefficient:[[7.32814283e-09]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.002102758934924842"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method2_using sklearn\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "x1=df1[['positive']] #dataframe\n",
    "y1=df1[['volatility']].values #numpy.ndarray\n",
    "reg1 = LinearRegression()\n",
    "reg1.fit(x1, y1)\n",
    "print('Intercept:{}'.format(reg1.intercept_))\n",
    "print('Coefficient:{}'.format(reg1.coef_))\n",
    "reg1.score(x1,y1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1 = reg1.predict(x1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "plt.scatter(x1,y1,color=\"black\",label='the actual value')\n",
    "plt.plot(x1,reg1.predict(x1),color=\"red\",linewidth=3,label='the predicted value')\n",
    "plt.title(\"regression model of volatility and positive\")\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"volatility\")\n",
    "plt.legend() \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>positive</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>20200122</td>\n",
       "      <td>2</td>\n",
       "      <td>59.435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>20200123</td>\n",
       "      <td>3</td>\n",
       "      <td>58.385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>20200124</td>\n",
       "      <td>4</td>\n",
       "      <td>56.715</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>20200127</td>\n",
       "      <td>6</td>\n",
       "      <td>55.815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>20200128</td>\n",
       "      <td>7</td>\n",
       "      <td>56.350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       date  positive   price\n",
       "0  20200122         2  59.435\n",
       "1  20200123         3  58.385\n",
       "2  20200124         4  56.715\n",
       "3  20200127         6  55.815\n",
       "4  20200128         7  56.350"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Price changes(using average price)\n",
    "df2 = pd.read_csv('/Users/fu/Desktop/file2.csv')\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>positive</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>date</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.943277</td>\n",
       "      <td>-0.10418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>positive</td>\n",
       "      <td>0.943277</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.10027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>price</td>\n",
       "      <td>-0.104180</td>\n",
       "      <td>0.100270</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date  positive    price\n",
       "date      1.000000  0.943277 -0.10418\n",
       "positive  0.943277  1.000000  0.10027\n",
       "price    -0.104180  0.100270  1.00000"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(df2.positive,df2.price)\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"price\")\n",
    "plt.show()\n",
    "df2.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                  price   R-squared:                       0.010\n",
      "Model:                            OLS   Adj. R-squared:                  0.003\n",
      "Method:                 Least Squares   F-statistic:                     1.473\n",
      "Date:                Sat, 12 Sep 2020   Prob (F-statistic):              0.227\n",
      "Time:                        11:19:37   Log-Likelihood:                -584.75\n",
      "No. Observations:                 147   AIC:                             1174.\n",
      "Df Residuals:                     145   BIC:                             1179.\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         35.2307      1.515     23.250      0.000      32.236      38.226\n",
      "positive    7.519e-07    6.2e-07      1.214      0.227   -4.73e-07    1.98e-06\n",
      "==============================================================================\n",
      "Omnibus:                        2.202   Durbin-Watson:                   0.175\n",
      "Prob(Omnibus):                  0.333   Jarque-Bera (JB):                2.028\n",
      "Skew:                          -0.288   Prob(JB):                        0.363\n",
      "Kurtosis:                       2.989   Cond. No.                     3.45e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.45e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/fu/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "#method_1_using statsmodels packages\n",
    "X2 = df2.iloc[:,1]\n",
    "Y2 = df2.iloc[:,2]\n",
    "X2 = sm.add_constant(X2) # We have an intercept in the model, so we increase the intercept\n",
    "est2 = sm.OLS(Y2,X2).fit()\n",
    "print(est2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#draw the picture of method 1\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "predicts = est2.predict() # the predicted value of the model\n",
    "X2 = df2.iloc[:, 1] # the independent variable is the data in column 2\n",
    "plt.scatter(X2, Y2, label='the actual value') \n",
    "plt.plot(X2, predicts, color = 'red', label='the predicted value')\n",
    "plt.legend() \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:[35.23071859]\n",
      "Coefficient:[[7.51915678e-07]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.010054131679144818"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method2_using sklearn\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "x2=df2[['positive']] #dataframe\n",
    "y2=df2[['price']].values #numpy.ndarray\n",
    "reg2 = LinearRegression()\n",
    "reg2.fit(x2, y2)\n",
    "print('Intercept:{}'.format(reg2.intercept_))\n",
    "print('Coefficient:{}'.format(reg2.coef_))\n",
    "reg2.score(x2,y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred2 = reg2.predict(x2)\n",
    "plt.figure()\n",
    "plt.scatter(x2,y2,color=\"black\")\n",
    "plt.plot(x2,reg2.predict(x2),color=\"red\",linewidth=4)\n",
    "plt.title(\"regression model of price and positive\")\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"price\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>production</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2020/1/24</td>\n",
       "      <td>13000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2020/1/31</td>\n",
       "      <td>12900</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2020/2/7</td>\n",
       "      <td>13000</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2020/2/14</td>\n",
       "      <td>13000</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2020/2/21</td>\n",
       "      <td>13000</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  production  positive\n",
       "0  2020/1/24       13000         4\n",
       "1  2020/1/31       12900        13\n",
       "2   2020/2/7       13000        28\n",
       "3  2020/2/14       13000       106\n",
       "4  2020/2/21       13000       299"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#output(using production)\n",
    "df3 = pd.read_csv('/Users/fu/Desktop/file3.csv')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>production</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>production</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.874978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>positive</td>\n",
       "      <td>-0.874978</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            production  positive\n",
       "production    1.000000 -0.874978\n",
       "positive     -0.874978  1.000000"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(df3.positive,df3.production)\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"production\")\n",
    "plt.show()\n",
    "df3.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:             production   R-squared:                       0.766\n",
      "Model:                            OLS   Adj. R-squared:                  0.757\n",
      "Method:                 Least Squares   F-statistic:                     91.45\n",
      "Date:                Sat, 12 Sep 2020   Prob (F-statistic):           2.56e-10\n",
      "Time:                        15:51:31   Log-Likelihood:                -225.12\n",
      "No. Observations:                  30   AIC:                             454.2\n",
      "Df Residuals:                      28   BIC:                             457.0\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1.269e+04    117.559    107.969      0.000    1.25e+04    1.29e+04\n",
      "positive      -0.0004   4.71e-05     -9.563      0.000      -0.001      -0.000\n",
      "==============================================================================\n",
      "Omnibus:                        3.200   Durbin-Watson:                   0.231\n",
      "Prob(Omnibus):                  0.202   Jarque-Bera (JB):                2.730\n",
      "Skew:                          -0.725   Prob(JB):                        0.255\n",
      "Kurtosis:                       2.718   Cond. No.                     3.54e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.54e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "#method_1_using statsmodels packages\n",
    "X3 = df3.iloc[:,2]\n",
    "Y3 = df3.iloc[:,1]\n",
    "X3 = sm.add_constant(X3) # We have an intercept in the model, so we increase the intercept\n",
    "est3 = sm.OLS(Y3,X3).fit()\n",
    "print(est3.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#draw the picture of method 1\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "predicts = est3.predict() # the predicted value of the model\n",
    "X3 = df3.iloc[:, 2] # the independent variable is the data in column 3\n",
    "plt.scatter(X3, Y3, label='the actual value') \n",
    "plt.plot(X3, predicts, color = 'red', label='the predicted value')\n",
    "plt.legend() \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:[12692.7429883]\n",
      "Coefficient:[[-0.00044999]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.7655863211480713"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method2_using sklearn\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "x3=df3[['positive']] #dataframe\n",
    "y3=df3[['production']].values #numpy.ndarray\n",
    "reg3 = LinearRegression()\n",
    "reg3.fit(x3, y3)\n",
    "print('Intercept:{}'.format(reg3.intercept_))\n",
    "print('Coefficient:{}'.format(reg3.coef_))\n",
    "reg3.score(x3,y3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred3 = reg3.predict(x3)\n",
    "plt.figure()\n",
    "plt.scatter(x3,y3,color=\"black\",label='actual value')\n",
    "plt.plot(x3,reg3.predict(x3),color=\"red\",linewidth=4,label='the predicted value')\n",
    "plt.title(\"regression model of output and positive\")\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"production\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>imports</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>43854</td>\n",
       "      <td>6660</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>43861</td>\n",
       "      <td>6615</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>43868</td>\n",
       "      <td>6978</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>43875</td>\n",
       "      <td>6547</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>43882</td>\n",
       "      <td>6217</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    date  imports  positive\n",
       "0  43854     6660         4\n",
       "1  43861     6615        13\n",
       "2  43868     6978        28\n",
       "3  43875     6547       106\n",
       "4  43882     6217       299"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import\n",
    "df4 = pd.read_csv('/Users/fu/Desktop/file41.csv')\n",
    "df4.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>imports</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>date</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.270298</td>\n",
       "      <td>0.951872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>imports</td>\n",
       "      <td>-0.270298</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.254085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>positive</td>\n",
       "      <td>0.951872</td>\n",
       "      <td>-0.254085</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              date   imports  positive\n",
       "date      1.000000 -0.270298  0.951872\n",
       "imports  -0.270298  1.000000 -0.254085\n",
       "positive  0.951872 -0.254085  1.000000"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(df4.positive,df4.imports)\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"imports\")\n",
    "plt.show()\n",
    "df4.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                imports   R-squared:                       0.065\n",
      "Model:                            OLS   Adj. R-squared:                  0.031\n",
      "Method:                 Least Squares   F-statistic:                     1.932\n",
      "Date:                Sat, 12 Sep 2020   Prob (F-statistic):              0.175\n",
      "Time:                        16:19:21   Log-Likelihood:                -233.93\n",
      "No. Observations:                  30   AIC:                             471.9\n",
      "Df Residuals:                      28   BIC:                             474.7\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       6264.0889    157.684     39.725      0.000    5941.087    6587.091\n",
      "positive   -8.774e-05   6.31e-05     -1.390      0.175      -0.000    4.16e-05\n",
      "==============================================================================\n",
      "Omnibus:                        0.366   Durbin-Watson:                   1.404\n",
      "Prob(Omnibus):                  0.833   Jarque-Bera (JB):                0.127\n",
      "Skew:                           0.157   Prob(JB):                        0.939\n",
      "Kurtosis:                       2.950   Cond. No.                     3.54e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.54e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/fu/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "#method_1_using statsmodels packages\n",
    "X4 = df4.iloc[:,2]\n",
    "Y4 = df4.iloc[:,1]\n",
    "X4 = sm.add_constant(X4) # We have an intercept in the model, so we increase the intercept\n",
    "est4 = sm.OLS(Y4,X4).fit()\n",
    "print(est4.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#draw the picture of method 1\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "predicts = est4.predict() # the predicted value of the model\n",
    "X4 = df4.iloc[:, 2] # the independent variable is the data in column 3\n",
    "plt.scatter(X4, Y4, label='the actual value') \n",
    "plt.plot(X4, predicts, color = 'red', label='the predicted value')\n",
    "plt.legend() \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:[6264.08891918]\n",
      "Coefficient:[[-8.77413292e-05]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.06455941372469365"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method2_using sklearn\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "x4 = df4[['positive']] #dataframe\n",
    "y4 = df4[['imports']].values #numpy.ndarray\n",
    "reg4 = LinearRegression()\n",
    "reg4.fit(x4, y4)\n",
    "print('Intercept:{}'.format(reg4.intercept_))\n",
    "print('Coefficient:{}'.format(reg4.coef_))\n",
    "reg4.score(x4,y4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred4 = reg4.predict(x4)\n",
    "plt.figure()\n",
    "plt.scatter(x4,y4,color=\"black\",label='actual value')\n",
    "plt.plot(x4,reg4.predict(x4),color=\"red\",linewidth=4,label='the predicted value')\n",
    "plt.title(\"regression model of imports and positive\")\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"imports\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>demand</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2020/1/24</td>\n",
       "      <td>19598</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2020/1/31</td>\n",
       "      <td>20810</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2020/2/7</td>\n",
       "      <td>20965</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2020/2/14</td>\n",
       "      <td>19602</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2020/2/21</td>\n",
       "      <td>19870</td>\n",
       "      <td>299</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  demand  positive\n",
       "0  2020/1/24   19598         4\n",
       "1  2020/1/31   20810        13\n",
       "2   2020/2/7   20965        28\n",
       "3  2020/2/14   19602       106\n",
       "4  2020/2/21   19870       299"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#demand\n",
    "df5 = pd.read_csv('/Users/fu/Desktop/file5.csv')\n",
    "df5.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>demand</th>\n",
       "      <th>positive</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>demand</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.179732</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>positive</td>\n",
       "      <td>-0.179732</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            demand  positive\n",
       "demand    1.000000 -0.179732\n",
       "positive -0.179732  1.000000"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plt.scatter(df5.positive,df5.demand)\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"demand\")\n",
    "plt.show()\n",
    "df5.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                 demand   R-squared:                       0.032\n",
      "Model:                            OLS   Adj. R-squared:                 -0.002\n",
      "Method:                 Least Squares   F-statistic:                    0.9347\n",
      "Date:                Sat, 12 Sep 2020   Prob (F-statistic):              0.342\n",
      "Time:                        16:28:54   Log-Likelihood:                -272.84\n",
      "No. Observations:                  30   AIC:                             549.7\n",
      "Df Residuals:                      28   BIC:                             552.5\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1.836e+04    576.919     31.824      0.000    1.72e+04    1.95e+04\n",
      "positive      -0.0002      0.000     -0.967      0.342      -0.001       0.000\n",
      "==============================================================================\n",
      "Omnibus:                        1.663   Durbin-Watson:                   0.368\n",
      "Prob(Omnibus):                  0.435   Jarque-Bera (JB):                1.451\n",
      "Skew:                          -0.402   Prob(JB):                        0.484\n",
      "Kurtosis:                       2.283   Cond. No.                     3.54e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 3.54e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/fu/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    }
   ],
   "source": [
    "#method_1_using statsmodels packages\n",
    "X5 = df5.iloc[:,2]\n",
    "Y5 = df5.iloc[:,1]\n",
    "X5 = sm.add_constant(X5) # We have an intercept in the model, so we increase the intercept\n",
    "est5 = sm.OLS(Y5,X5).fit()\n",
    "print(est5.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#draw the picture of method 1\n",
    "plt.rcParams['font.sans-serif'] = ['SimHei']\n",
    "plt.rcParams['axes.unicode_minus'] = False\n",
    "\n",
    "predicts = est5.predict() # the predicted value of the model\n",
    "X5 = df5.iloc[:, 2] # the independent variable is the data in column 3\n",
    "plt.scatter(X5, Y5, label='the actual value') \n",
    "plt.plot(X5, predicts, color = 'red', label='the predicted value')\n",
    "plt.legend() \n",
    "plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept:[18359.73699828]\n",
      "Coefficient:[[-0.00022326]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.03230363594639907"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#method2_using sklearn\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "x5 = df5[['positive']] #dataframe\n",
    "y5 = df5[['demand']].values #numpy.ndarray\n",
    "reg5 = LinearRegression()\n",
    "reg5.fit(x5, y5)\n",
    "print('Intercept:{}'.format(reg5.intercept_))\n",
    "print('Coefficient:{}'.format(reg5.coef_))\n",
    "reg5.score(x5,y5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pred5 = reg5.predict(x5)\n",
    "plt.figure()\n",
    "plt.scatter(x5,y5,color=\"black\",label='actual value')\n",
    "plt.plot(x5,reg5.predict(x5),color=\"red\",linewidth=4,label='the predicted value')\n",
    "plt.title(\"regression model of demand and positive\")\n",
    "plt.xlabel(\"positive\")\n",
    "plt.ylabel(\"demand\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
